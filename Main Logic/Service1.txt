using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.Text;
using System.Xml;
using System.Xml.XPath;
using System.IO;
using System.Net;

namespace WcfService3
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "Service1" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select Service1.svc or Service1.svc.cs at the Solution Explorer and start debugging.
    public class Service1 : IService1
    {
        public string findNearestStore(string zipCode, string storeName)
        {
            string getLatLong = "http://maps.googleapis.com/maps/api/geocode/xml?address=" + zipCode;  // API that woud return latitude and longitude coordinates based upon the entered zipcode
            XmlDocument xmlReception = makeWebRequest(getLatLong);
            string parsedXml = processMapApiResponse(xmlReception);
            string mapApiRequest = "https://maps.googleapis.com/maps/api/place/nearbysearch/xml?location=" + parsedXml + "&radius=32187&name=" + storeName + "&key=AIzaSyBXYtS6Cf7IMdkhrDXCbeFkuh3dTnfeeAs";   // returning the store location with this API
            XmlDocument mapApiResponse = makeWebRequest(mapApiRequest);
            string parsedMapApiResponse = processXmlResponse(mapApiResponse);
            return parsedMapApiResponse;
        }

        private XmlDocument makeWebRequest(string requestUrl)
        {
            HttpWebRequest request = WebRequest.Create(requestUrl) as HttpWebRequest;
            HttpWebResponse response = request.GetResponse() as HttpWebResponse;
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.Load(response.GetResponseStream());
            return (xmlDoc);
        }

        private static string processXmlResponse(XmlDocument locationsResponse)
        {
            string output = "";
            XmlNodeList locationElements = locationsResponse.SelectNodes("PlaceSearchResponse/result");
            XmlNodeList locationElement = locationsResponse.SelectNodes("PlaceSearchResponse");
            foreach (XmlNode result in locationElements)
            {
                output = result.SelectSingleNode("name").InnerText + "," + result.SelectSingleNode("vicinity").InnerText;
                break;
            }
            foreach (XmlNode calc in locationElement)
            {
                if (calc.SelectSingleNode("status").InnerText == "ZERO_RESULTS")
                {
                    output = "Error, no such store found within 20 miles";
                }
            }
            Console.WriteLine(output);
            return output;
        }

        private static string processMapApiResponse(XmlDocument locationResponse)
        {
            string latText = "";
            string lngText = "";
            string output = "";
            XmlNodeList location = locationResponse.SelectNodes("GeocodeResponse/result/geometry/location");
            try
            {
                foreach (XmlNode result in location)
                {
                    //Selecting the lat, lng tags from the received XML document
                    latText = (result.SelectSingleNode("lat").InnerText);
                    lngText = (result.SelectSingleNode("lng").InnerText);

                    output = latText + "," + lngText;
                    break;
                }
                return output;
            }
            catch
            {
                output = "No store found";
            }
            Console.WriteLine(output);
            return output;
        }
    }
}
